General
* Split into Game and Engine solutions

* Create include directory

* Delete Manager DLL, move Manager.h to Core and implement in respective DLLs

* Update Time class to use std::chrono

* Implement thread class with async as basis

* Create visitor class for all possible intersects (Lines, Rects, Circles, Cubes, Frustrum, etc)

* Create a file called data.json which contains what to load in the scene,
* when a build occurs it will copy into the bin, which you can then edit,
* even write to, to edit the scene, then commit later

Core
* Node
* octree<Node>
* Node will need a transform to be sorted by

Graphics

* Add diagnostics early
* Focus on true bounce lighting (ray-tracing)
* consider using gltf as well as tinyobj, standardizes asset values

Managers

* Add async to each Load function for managers, this will allow all resources to be loaded in real time!